# ********RoostGPT********

# Test generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview
# 
# Feature file generated for /nobelPrize/{category}/{year}_get for http method type GET 
# RoostTestHash=adfce3f1d2
# 
# 

# ********RoostGPT********
Feature: Nobel Prize Information Retrieval

  Background:
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
    * url urlBase
    * def authToken = karate.properties['AUTH_TOKEN']
    * header Authorization = 'Bearer ' + authToken

  Scenario Outline: Get Nobel Prize information for a specific category and year
    Given path '2.1/nobelPrize', <category>, <year>
    When method get
    Then status 200
    And assert response.nobelPrize.category.en != null
    And assert response.nobelPrize.category.se != null
    And assert response.nobelPrize.categoryFullName.en != null
    And assert response.nobelPrize.categoryFullName.se != null
    And assert response.nobelPrize.dateAwarded =~ /^\d{4}-\d{2}-\d{2}$/
    And assert response.nobelPrize.prizeAmount == <prizeAmount>
    And assert response.nobelPrize.prizeAmountAdjusted == <prizeAmountAdjusted>
    And match each response.nobelPrize.laureates[*].id == '#number'
    And match each response.nobelPrize.laureates[*].name.en == '#string'
    And match each response.nobelPrize.laureates[*].portion == '#regex[1|1/2|1/3|1/4]'
    And match each response.nobelPrize.laureates[*].sortOrder == '#regex[1|2|3]'
    And match each response.nobelPrize.laureates[*].motivation.en == '#string'

    Examples:
      | category | year | prizeAmount | prizeAmountAdjusted |
      | 'che'    | 1989 | 1000000     | 1000000            |
      | 'eco'    | 2001 | 500000      | 700000             |
      | 'lit'    | 2018 | 900000      | 900000             |
      | 'pea'    | 1999 | 800000      | 1100000            |
      | 'phy'    | 2010 | 950000      | 1000000            |
      | 'med'    | 2020 | 850000      | 850000             |
      
  Scenario: Get Nobel Prize information with invalid category
    Given path '2.1/nobelPrize', 'invalid', 1989
    When method get
    Then status 400
    And match response == { code: '404', message: 'No Nobel Prize found for the given category and year' }

  Scenario: Get Nobel Prize information for a year not found
    Given path '2.1/nobelPrize', 'che', 1800
    When method get
    Then status 404
    And match response == """{ code: '404', message: 'No Nobel Prize found for the given category and year' }"""

  Scenario: Get Nobel Prize information with unprocessable year
    Given path '2.1/nobelPrize', 'che', 'invalid'
    When method get
    Then status 422
    And match response == """{ code: '422', message: 'The year provided is unprocessable' }"""
