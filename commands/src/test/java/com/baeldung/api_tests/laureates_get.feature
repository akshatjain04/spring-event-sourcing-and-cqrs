# ********RoostGPT********

# Test generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview
# 
# Feature file generated for /laureates_get for http method type GET 
# RoostTestHash=bb9ad621b1
# 
# 

# ********RoostGPT********
Feature: Nobel Prize Laureates API Test Suite

Background:
* def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
* url urlBase

Scenario Outline: Get laureates with various query parameters
Given path '/2.1/laureates'
And param offset = <offset>
And param limit = <limit>
And param sort = <sort>
And param ID = <ID>
And param name = <name>
And param gender = <gender>
And param motivation = <motivation>
And param affiliation = <affiliation>
And param residence = <residence>
And param birthDate = <birthDate>
And param birthDateTo = <birthDateTo>
And param deathDate = <deathDate>
And param deathDateTo = <deathDateTo>
And param foundedDate = <foundedDate>
And param birthCity = <birthCity>
And param birthCountry = <birthCountry>
And param birthContinent = <birthContinent>
And param deathCity = <deathCity>
And param deathCountry = <deathCountry>
And param deathContinent = <deathContinent>
And param foundedCity = <foundedCity>
And param foundedCountry = <foundedCountry>
And param foundedContinent = <foundedContinent>
And param HeadquartersCity = <HeadquartersCity>
And param HeadquartersCountry = <HeadquartersCountry>
And param HeadquartersContinent = <HeadquartersContinent>
And param nobelPrizeYear = <nobelPrizeYear>
And param yearTo = <yearTo>
And param nobelPrizeCategory = <nobelPrizeCategory>
And param format = <format>
And param csvLang = <csvLang>
And header Authorization = karate.properties['AUTH_TOKEN']
When method get
Then status 200
And match response contains { laureates: '#array' }
And match each response.laureates[*] contains { id: '#number', nobelPrizes: '#array' }

Examples:
| offset | limit | sort | ID | name | gender | motivation | affiliation | residence | birthDate | birthDateTo | deathDate | deathDateTo | foundedDate | birthCity | birthCountry | birthContinent | deathCity | deathCountry | deathContinent | foundedCity | foundedCountry | foundedContinent | HeadquartersCity | HeadquartersCountry | HeadquartersContinent | nobelPrizeYear | yearTo | nobelPrizeCategory | format | csvLang |
| 1      | 10    | 'asc' | 1 | 'Curie' | 'female' | 'Physics' | 'Sorbonne University' | 'Paris' | '1867' | '1934' | '1934' | '1934' | '1867' | 'Warsaw' | 'Poland' | 'Europe' | 'Sallanches' | 'France' | 'Europe' | 'Warsaw' | 'Poland' | 'Europe' | 'Paris' | 'France' | 'Europe' | 1903 | 1934 | 'phy' | 'json' | 'en' |

Scenario: Get laureates with invalid parameters
Given path '/2.1/laureates'
And param limit = -1
And header Authorization = karate.properties['AUTH_TOKEN']
When method get
Then status 400
And match response == { code: '400', message: '#string' }

Scenario: Get laureates with non-existent ID
Given path '/2.1/laureates'
And param ID = 999999
And header Authorization = karate.properties['AUTH_TOKEN']
When method get
Then status 404
And match response == { code: '404', message: '#string' }
