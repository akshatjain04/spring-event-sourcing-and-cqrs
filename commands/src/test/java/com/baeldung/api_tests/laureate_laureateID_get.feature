# ********RoostGPT********

# Test generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview
# 
# Feature file generated for /laureate/{laureateID}_get for http method type GET 
# RoostTestHash=3a8d014c99
# 
# 

# ********RoostGPT********
Feature: Nobel Prize Laureate Information Retrieval

Background:
  * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
  * def authToken = karate.properties['AUTH_TOKEN']
  * header Authorization = 'Bearer ' + authToken

Scenario Outline: Get information for a specific Nobel Prize Laureate by ID
  Given url urlBase + '/2.1/laureate/' + <laureateID>
  When method get
  Then status 200
  And match response contains { laureate: '#object' }
  And match response.laureate.id == <laureateID>
  And assert response.laureate?.laureateIfPerson?.knownName?.en != null
  And assert response.laureate?.laureateIfOrg?.orgName?.en != null

  Examples:
    | laureateID |
    | 456        |

Scenario: Attempt to get information for a non-existent Nobel Prize Laureate
  Given path '/2.1/laureate/', -1
  When method get
  Then status 404
  And match response == { code: '404', message: 'There is not Laureate born that date' }

Scenario: Attempt to get information for a Nobel Prize Laureate with malformed ID
  Given path '/2.1/laureate/', 'abc'
  When method get
  Then status 400
  And match response == { code: '404', message: 'There is not Laureate born that date' }

Scenario: Attempt to get information for a Nobel Prize Laureate with unprocessable ID
  Given path '/2.1/laureate/', 0
  When method get
  Then status 422
  And match response == { code: '404', message: 'There is not Laureate born that date' }
