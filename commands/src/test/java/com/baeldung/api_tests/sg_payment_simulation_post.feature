# ********RoostGPT********

# Test generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview
# 
# Feature file generated for /sg/payment/simulation_post for http method type POST 
# RoostTestHash=85316b6f05
# 
# 

# ********RoostGPT********
Feature: Singapore PayNow Payment Simulation API

  Background:
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
    * url urlBase
    * def authToken = karate.properties['AUTH_TOKEN']

  Scenario Outline: Simulate payment with valid request body and headers
    Given path '/sg/payment/simulation'
    And header Content-Type = 'application/json'
    And header message_encrypt = false
    And header Authorization = 'Bearer ' + authToken
    And request <requestBody>
    When method post
    Then status 200
    And match response contains { api_gw: '#object', response: '#object' }
    And match response.api_gw.messageId is '#string'
    And match response.api_gw.returnCode is '200'
    And match response.api_gw.returnReason is '#string'
    And match response.api_gw.sentTime is '#string'
    And match response.api_gw.responseTime is '#string'
    And match response.response.proCode is '#string'
    And match response.response.proMsg is '#string'
    And match response.response.txnRef is '#string'

    Examples:
      | requestBody |
      | """
        {
          "is_notification_encrypted": "Y",
          "merId": "S742000S3910000",
          "txnRef": "Transaction34523411",
          "currency": "SGD",
          "amount": 1050,
          "originatingCustName": "Sean Mante"
        }
        """ |
      | """
        {
          "is_notification_encrypted": "N",
          "merId": "S742000S3910000",
          "txnRef": "Transaction12345678",
          "currency": "SGD",
          "amount": 500,
          "originatingCustName": "Jane Doe"
        }
        """ |

  Scenario: Simulate payment with bad request due to missing required fields
    Given path '/sg/payment/simulation'
    And header Content-Type = 'application/json'
    And header message_encrypt = false
    And header Authorization = 'Bearer ' + authToken
    And request { "merId": "S742000S3910000", "currency": "SGD", "amount": 1050 }
    When method post
    Then status 400
    And match response contains { api_gw: '#object' }
    And match response.api_gw.messageId is '#string'
    And match response.api_gw.returnCode is '400'
    And match response.api_gw.returnReason is '#string'
    And match response.api_gw.sentTime is '#string'
    And match response.api_gw.responseTime is '#string'

  Scenario: Unauthorized access with invalid auth token
    Given path '/sg/payment/simulation'
    And header Content-Type = 'application/json'
    And header message_encrypt = false
    And header Authorization = 'Bearer invalid_token'
    And request """
      {
        "is_notification_encrypted": "Y",
        "merId": "S742000S3910000",
        "txnRef": "Transaction34523411",
        "currency": "SGD",
        "amount": 1050,
        "originatingCustName": "Sean Mante"
      }
      """
    When method post
    Then status 403

  Scenario: Resource not found when using incorrect path
    Given path '/sg/payment/non_existing'
    And header Content-Type = 'application/json'
    And header message_encrypt = false
    And header Authorization = 'Bearer ' + authToken
    And request """
      {
        "is_notification_encrypted": "Y",
        "merId": "S742000S3910000",
        "txnRef": "Transaction34523411",
        "currency": "SGD",
        "amount": 1050,
        "originatingCustName": "Sean Mante"
      }
      """
    When method post
    Then status 404

  Scenario: Internal server error simulation
    Given path '/sg/payment/simulation'
    And header Content-Type = 'application/json'
    And header message_encrypt = false
    And header Authorization = 'Bearer ' + authToken
    And request """
      {
        "is_notification_encrypted": "Y",
        "merId": "S742000S3910000",
        "txnRef": "Transaction34523411",
        "currency": "SGD",
        "amount": 1050,
        "originatingCustName": "Sean Mante"
      }
      """
    And def mockResponse = function(){ karate.abort() } # simulate internal error by aborting the connection
    When method post
    Then status 500
