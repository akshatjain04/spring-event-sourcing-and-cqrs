// ********RoostGPT********
/*
Test generated by RoostGPT for test spring-event-sourcing-and-cqrs-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=getIdOfLead_449a1730e1
ROOST_METHOD_SIG_HASH=getIdOfLead_aeb9b47e90

Scenario 1: Test for valid UUID return
Details:
  TestName: getIdOfLeadReturnsValidUUID 
  Description: This test is meant to check the proper functioning of the method "getIdOfLead()" by ensuring that it correctly returns a valid UUID. 
  
Execution:
  Arrange:  Set a UUID as 'idOfLead' in the test object.
  Act:  Call the method "getIdOfLead()" on this object.
  Assert: Use JUnit assertions to make sure that the returned UUID is as expected.
  
Validation:
  The assertion verifies that a valid UUID is returned. This is essential to ensure that the proper reference to the Lead is maintained throughout the application.

Scenario 2: Test for default/null value of UUID return
Details:
  TestName: getIdOfLeadReturnsNull 
  Description: This test is meant to check the scenario when 'idOfLead' is not set, which means it would return null.
  
Execution:
  Arrange:  Do not set 'idOfLead' variable into the object.
  Act:  Call the method "getIdOfLead()".
  Assert: Use JUnit assertions to check if null is returned.
  
Validation: 
  This test validates that when 'idOfLead' is not set, the method correctly returns null. This is significant as not all Leads might have a UUID set at all times.

Scenario 3: Test for UUID's immutability
Details:
  TestName: testUuidImmutability 
  Description: The test is meant to verify the immutability of UUID returned by the method "getIdOfLead()"
  
Execution:
  Arrange: Set a UUID as 'idOfLead' in the object.
  Act: Retrieve the UUID using "getIdOfLead()" and then try to modify it.
  Assert: Check if an UnsupportedOperationException is thrown when the retrieved UUID is modified.
  
Validation:
  This is a significant test case because it ensures the protection of the UUID's integrity and consistency throughout the application. The returned UUID shouldn't be modified, and an exception should be thrown if there is an attempt to modify it.
*/

// ********RoostGPT********
package com.baeldung.store.events;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.util.UUID;

public class LeadClickedOnPromotionalLinkGetIdOfLeadTest {
    private LeadClickedOnPromotionalLink promoLink;

    @BeforeEach
    public void setUp() {
        promoLink = new LeadClickedOnPromotionalLink();
    }

    @Test
    public void getIdOfLeadReturnsValidUUID() {
        UUID uuid = UUID.randomUUID();
        promoLink.setIdOfLead(uuid);
        assertEquals(uuid, promoLink.getIdOfLead());
    }

    @Test
    public void getIdOfLeadReturnsNull() {
        // no id set during setup so default value is null
        assertNull(promoLink.getIdOfLead());
    }

    @Test
    public void testUuidImmutability() {
        UUID uuid = UUID.randomUUID();
        promoLink.setIdOfLead(uuid);
        UUID retrievedUUID = promoLink.getIdOfLead();

        // UUID is expected to be immutable so there should be no setter 
        // ensuring that UnsupportedOperationException is thrown
        assertThrows(UnsupportedOperationException.class, () -> retrievedUUID.getClass().getMethod("setLeastSignificantBits", long.class));
    }
}
